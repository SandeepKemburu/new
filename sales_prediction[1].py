# -*- coding: utf-8 -*-
"""Sales_prediction[1].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RN-H0XmA6ArjAL1952DXRSmNIOhp0Jdq
"""

import pandas as pd
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

"""# New section"""

df = pd.read_csv("Advertising.csv")
df.head()

df.columns

df = df.drop('Unnamed: 0',axis=1)

df.info()

df.describe()

df.shape

df.isnull().sum()

fig = px.histogram(df, x='Sales', nbins=10, title='Histogram of Sales', template="plotly_dark",color_discrete_sequence=['#FF6F00'])
fig.update_layout(bargap=0.2)
fig.show()

# Scatter plot of 'TV' vs 'Sales'
fig = px.scatter(df, x='TV', y='Sales', title='Scatter Plot of TV vs Sales', color='Sales',template="plotly_dark", color_continuous_scale='Viridis')
fig.show()

# Scatter plot of 'Radio' vs 'Sales'
fig = px.scatter(df, x='Radio', y='Sales', title='Scatter Plot of Radio vs Sales', color='Sales',template="plotly_dark", color_continuous_scale='RdYlBu')
fig.show()

# Scatter plot of 'Newspaper' vs 'Sales'
fig = px.scatter(df, x='Newspaper', y='Sales', title='Scatter Plot of Newspaper vs Sales', template="plotly_dark",color='Sales', color_continuous_scale='Blues')
fig.show()

# Correlation matrix
correlation_matrix = df.corr()
fig = px.imshow(correlation_matrix, labels=dict(color='Correlation'), title='Correlation Matrix',template="plotly_dark", color_continuous_scale='YlGnBu')
fig.show()

X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

X_train, X_test, y_train,y_test = train_test_split(X,y,test_size = 0.20, random_state = 0)

model = LinearRegression()
model.fit(X_train,y_train)

y_pred=model.predict(X_test)
y_pred

# Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

# report
report = pd.DataFrame({'Metric': ['Mean Squared Error (MSE)', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)'],
                       'Value': [mse, rmse, r2]})

print(report)

import plotly.graph_objects as go
fig = go.Figure(data=go.Scatter(x=y_test, y=y_pred, mode='markers'))

fig.update_layout(
    title='Scatter Plot of y_test vs y_pred',
    xaxis_title='y_test',
    yaxis_title='y_pred'
)
fig.show()

